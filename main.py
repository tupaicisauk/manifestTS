import os
import json
import discord
from discord.ext import tasks
from discord import app_commands
from flask import Flask
from threading import Thread
from google.oauth2 import service_account
from googleapiclient.discovery import build
import aiohttp
import requests

# ====== KEEP ALIVE SERVER ======
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ====== DISCORD BOT ======
intents = discord.Intents.default()
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID"))
FOLDER_ID = os.getenv("FOLDER_ID")

# ====== GOOGLE DRIVE SETUP ======
SCOPES = ["https://www.googleapis.com/auth/drive"]
SERVICE_ACCOUNT_INFO = os.getenv("GDRIVE_CREDENTIALS")

if not SERVICE_ACCOUNT_INFO:
    raise ValueError("‚ùå GDRIVE_CREDENTIALS tidak ditemukan di environment variable!")

creds = service_account.Credentials.from_service_account_info(
    json.loads(SERVICE_ACCOUNT_INFO), scopes=SCOPES
)
drive_service = build("drive", "v3", credentials=creds)

# ====== CACHE UNTUK CEK FILE BARU ======
known_files = set()

# ====== FETCH DATA DARI STEAM ======
async def fetch_steam_info(appid: str):
    try:
        async with aiohttp.ClientSession() as session:
            store_url = f"https://store.steampowered.com/api/appdetails?appids={appid}"
            async with session.get(store_url) as resp:
                data = await resp.json()
                if data[str(appid)]["success"]:
                    game_name = data[str(appid)]["data"]["name"]
                    header_img = data[str(appid)]["data"]["header_image"]
                else:
                    game_name, header_img = f"AppID {appid}", None
        return {
            "name": game_name,
            "steam": f"https://store.steampowered.com/app/{appid}",
            "steamdb": f"https://steamdb.info/app/{appid}",
            "header": header_img
        }
    except:
        return {
            "name": f"AppID {appid}",
            "steam": f"https://store.steampowered.com/app/{appid}",
            "steamdb": f"https://steamdb.info/app/{appid}",
            "header": None
        }

# ====== DOWNLOAD FILE DARI GOOGLE DRIVE ======
def download_file(file_id, file_name):
    request = drive_service.files().get_media(fileId=file_id)
    filepath = f"/tmp/{file_name}"
    with open(filepath, "wb") as f:
        downloader = requests.get(
            f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media",
            headers={"Authorization": f"Bearer {creds.token}"},
            stream=True
        )
        for chunk in downloader.iter_content(chunk_size=4096):
            if chunk:
                f.write(chunk)
    return filepath

# ====== SLASH COMMAND /gen ======
@tree.command(name="gen", description="Generate manifest dari Google Drive dengan AppID")
async def gen(interaction: discord.Interaction, appid: str):
    await interaction.response.defer()  # kasih waktu bot mikir

    try:
        query = f"name contains '{appid}.zip' and '{FOLDER_ID}' in parents"
        results = drive_service.files().list(
            q=query,
            fields="files(id, name, createdTime, modifiedTime, size, mimeType)"
        ).execute()
        items = results.get("files", [])

        if not items:
            await interaction.followup.send(
                f"‚ùå File untuk AppID {appid} tidak ditemukan di Google Drive."
            )
            return

        file = items[0]
        file_id, file_name = file["id"], file["name"]
        created, modified = file["createdTime"], file["modifiedTime"]

        info = await fetch_steam_info(appid)

        # Download file dari Google Drive
        filepath = download_file(file_id, file_name)

        embed = discord.Embed(
            title=f"‚úÖ Manifest Generated: {info['name']}",
            description=f"Successfully generated manifest files for **{info['name']}** ({appid})",
            color=discord.Color.green()
        )
        embed.add_field(name="Links", value=f"[Steam Store]({info['steam']}) | [SteamDB]({info['steamdb']})", inline=False)
        embed.add_field(name="Manifest Status", value="‚úÖ All manifests are up to date", inline=False)
        embed.add_field(name="Google Drive", value=f"Upload date: {created[:10]} ‚Ä¢ Updated date: {modified[:10]}", inline=False)
        if info['header']:
            embed.set_image(url=info['header'])
        embed.set_footer(text="Generated by TechStation Manifest")

        await interaction.followup.send(embed=embed, file=discord.File(filepath, file_name))

    except Exception as e:
        await interaction.followup.send(
            f"‚ùå Error saat generate manifest: {str(e)}"
        )

# ====== BACKGROUND TASK CEK FILE BARU ======
@tasks.loop(minutes=1)
async def check_new_files():
    global known_files
    try:
        results = drive_service.files().list(
            q=f"'{FOLDER_ID}' in parents",
            fields="files(id, name, createdTime, modifiedTime, mimeType)"
        ).execute()
        items = results.get("files", [])

        new_files = []
        for f in items:
            if f["id"] not in known_files:
                known_files.add(f["id"])
                new_files.append(f)

        if new_files:
            channel = bot.get_channel(DISCORD_CHANNEL_ID)
            for file in new_files:
                appid = file["name"].replace(".zip", "")
                info = await fetch_steam_info(appid)

                embed = discord.Embed(
                    title=f"üÜï New Game Added: {info['name']}",
                    description=f"A new manifest has been uploaded for **{info['name']}** ({appid})",
                    color=discord.Color.blue()
                )
                embed.add_field(name="Links", value=f"[Steam Store]({info['steam']}) | [SteamDB]({info['steamdb']})", inline=False)
                embed.add_field(name="Upload Info", value=f"Upload date: {file['createdTime'][:10]} ‚Ä¢ Updated date: {file['modifiedTime'][:10]}", inline=False)
                if info['header']:
                    embed.set_image(url=info['header'])
                embed.set_footer(text="Reported by TechStation Manifest")

                await channel.send(embed=embed)

    except Exception as e:
        print(f"‚ùå Error di check_new_files: {e}")

# ====== ON READY ======
@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Bot {bot.user} sudah online dengan slash command!")
    check_new_files.start()

# ====== START BOT ======
keep_alive()
bot.run(DISCORD_TOKEN)
