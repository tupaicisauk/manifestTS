import os
import discord
from discord.ext import commands, tasks
from flask import Flask
from threading import Thread
from google.oauth2 import service_account
from googleapiclient.discovery import build
import aiohttp
import asyncio
from datetime import datetime

# ================== KEEP ALIVE SERVER ==================
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

def run():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ================== DISCORD BOT SETUP ==================
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="/", intents=intents)

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
DISCORD_CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID"))
FOLDER_ID = os.getenv("FOLDER_ID")
GDRIVE_CREDENTIALS = os.getenv("GDRIVE_CREDENTIALS")

if not DISCORD_TOKEN or not DISCORD_CHANNEL_ID or not FOLDER_ID or not GDRIVE_CREDENTIALS:
    raise ValueError("❌ Pastikan semua environment variable sudah diset (DISCORD_TOKEN, DISCORD_CHANNEL_ID, FOLDER_ID, GDRIVE_CREDENTIALS)")

# ================== GOOGLE DRIVE SERVICE ==================
import json
creds_dict = json.loads(GDRIVE_CREDENTIALS)
creds = service_account.Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/drive"]
)
drive_service = build("drive", "v3", credentials=creds)

last_seen_files = set()

# ================== FETCH STEAM DATA ==================
async def fetch_steam_data(appid: str):
    url = f"https://store.steampowered.com/api/appdetails?appids={appid}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if data and data.get(appid, {}).get("success"):
                game_data = data[appid]["data"]
                return {
                    "name": game_data.get("name", "Unknown"),
                    "release_date": game_data.get("release_date", {}).get("date", "Unknown"),
                    "developers": ", ".join(game_data.get("developers", ["Unknown"])),
                    "header_image": game_data.get("header_image", None),
                }
    return None

# ================== CHECK NEW FILES ==================
@tasks.loop(minutes=2)
async def check_new_files():
    global last_seen_files
    results = drive_service.files().list(
        q=f"'{FOLDER_ID}' in parents and mimeType='application/zip'",
        fields="files(id, name, createdTime, modifiedTime)",
        orderBy="createdTime desc"
    ).execute()

    files = results.get("files", [])
    new_files = [f for f in files if f["id"] not in last_seen_files]

    for file in new_files:
        last_seen_files.add(file["id"])

        # Extract appid from filename (e.g. 123456.zip → 123456)
        appid = file["name"].replace(".zip", "")
        steam_data = await fetch_steam_data(appid)

        # Build embed
        embed = discord.Embed(
            title=f"{steam_data['name']} ({appid}) Added" if steam_data else f"Game Added ({appid})",
            description=f"Successfully generated manifest files for **{steam_data['name']}** ({appid})" if steam_data else f"Manifest generated for AppID {appid}",
            color=discord.Color.green()
        )

        embed.add_field(
            name="Links",
            value=f"[Steam Store](https://store.steampowered.com/app/{appid}) | [SteamDB](https://steamdb.info/app/{appid})",
            inline=False
        )

        if steam_data:
            embed.add_field(name="Release Date", value=steam_data["release_date"], inline=True)
            embed.add_field(name="Developer", value=steam_data["developers"], inline=True)

        embed.add_field(name="Upload Date", value=file["createdTime"][:10], inline=True)
        embed.add_field(name="Updated Date", value=file["modifiedTime"][:10], inline=True)

        if steam_data and steam_data["header_image"]:
            embed.set_image(url=steam_data["header_image"])

        embed.set_footer(text="Generated by TechStation Manifest")

        channel = bot.get_channel(DISCORD_CHANNEL_ID)
        await channel.send(embed=embed)

# ================== BOT EVENTS ==================
@bot.event
async def on_ready():
    print(f"✅ Bot {bot.user} sudah online!")
    check_new_files.start()

# ================== START ==================
keep_alive()
bot.run(DISCORD_TOKEN)
